LDA 3,0,0,binary 101		Set X1 to address x=160 (10100000 in binary) to aid with large addresses (passes through R3 and Transfer Address t); PROGRAM 1 START (this instruction will be stored at address 30)
SRC 3,1,1,5					Get 160 (decimal) by shifting and adding bits
AIR 3,0 					Yes, this does nothing now since the value of x changed from what I initially thought, but if I don't leave it here all the jump addresses will be off
STR 3,0,0,29				Move x from R3 to X1 (passes through address 29)
LDX 1,0,29
LDA 3,0,0,30				Set X2 to y=69 to aid with jumping to addresses
AIR 3,30
AIR 3,9
STR 3,0,0,29				Move y from R3 to X2 (passes through address 29)
LDX 2,0,29
AIR 3,30					Set X3 to z=102 to aid with jumping to later addresses
AIR 3,3
STR 3,0,0,29				Move z from R3 to X3 (passes through address 29)
LDX 3,0,29
LDA 3,0,0,binary 11111		Memory address e=184 stores the bit string that represents the Enter key, 1111111111111111(16 ones) (don't use ASCII code since that could be mistaken for a number)
SRC 3,1,1,5					Get 16 ones by logically shifting left 5 bits and adding binary 11111
AIR 3,binary 11111			Result should be 1111111111 (10 ones) at this point
SRC 3,1,1,5
AIR 3,binary 11111			Result should be 15 ones at this point
SRC 3,1,1,1
AIR 3,1 					R3 now has 16 ones
STR 3,1,0,24(e)				Store the 16 ones in the Enter address e
STR 3,1,0,29(d)				Memory address d=189 (decimal) stores the minimum difference between the number to try to match and the closest array value AKA Min Diff Address (defaults to 16 ones)
LDA 3,0,0,binary 10101		Memory address n=185 stores the bit string that represents a newline character, 1010101010101010 (don't use ASCII code since that could be mistaken for a number)
SRC 3,1,1,5					Get newline bit string by logically shifting left 5 bits and adding the ones and zeros
AIR 3,binary 01010	
SRC 3,1,1,5
AIR 3,binary 10101
SRC 3,1,1,1					Result should be 1010101010101010
STR 3,1,0,25(n)				Store bit string in Newline address n
LDA 3,1,0,29(a)				Array starts at address a=190 (but loop increments first so store 189 initially)
SIR 3,0						x changed from what I thought, but leaving an instruction here so addresses won't be off
STR 3,1,0,26(i)				Memory address i=186 (decimal) stores the current array address being working on AKA Array Element Address (starts at 1 behind the first element of the array since increment is done first in the loop)
LDA 1,0,0,20				R1 stores the for loop counter (starts at 20 in decimal and decreases)/whether there are leading zeros while printing
STR 1,1,0,27(b)				Memory address b=187 is the backup for a register (starts at 20 in decimal to match R1)
LDA 2,0,0,10				R2 stores the number 10 (decimal) while getting the array input/the closest array value to the number to try to match so far
LDA 0,0,0,0					R0 stores the number to be added to the array so far (starts at 0)/the divisor to parsing the separate digits to print
LDA 3,0,0,0
STR 3,1,0,28(m)				Memory address m=188 (decimal) stores the number to try to match AKA Num To Match Address (defaults to 0)
LDR 3,1,0,26(i)				Add 1 to Array Element Address by loading the Array Element Address contents into R3; ARRAY INPUT FOR LOOP START
AIR 3,1						Then adding 1 (Immed) to R3
STR 3,1,0,26(i)				Then storing the R3 contents back into the Array Element Address
IN 3,0						Read in the character into R3; READ NEXT CHAR OF NUM
SMR 3,1,0,24(e)				Subtract the Enter key/carriage return bit string (stored in e) from R3 (if UNDERFLOW, R3 contents will be left alone)
JCC 1,2,0,7(paid)			If UNDERFLOW, character is not Enter, so jump to PROCESS ARRAY INPUT DIGIT
JMA 2,0,16(adone)			Else, unconditional jump to ALL DIGITS OF NUM ENTERED
STR 1,1,0,27(b)				Backup R1 loop counter to address b since it will be affected by MLT; PROCESS ARRAY INPUT DIGIT
MLT 0,2						Multiply R0 contents by 10 (decimal, stored in R2) to move it to the tens place
STR 1,1,0,23(t)				MLT will have set R0 to 0 for the higher bits while R1 has the actual product, so move R1 contents to R0 (Memory address t=183 (decimal) stores the value to be transferred between registers)
LDR 0,1,0,23(t)
LDR 1,1,0,27(b)				Restore R1 with contents from backup address
STR 3,1,0,23(t)				Add the R3 contents into R0 (passes through transfer address)
AMR 0,1,0,23(t)	
OUT 3,1						Output the R3 contents--GUI filters out non-digit inputs so don't have to worry if char is invalid
JMA 2,0,3(rncon)			Unconditional jump to READ NEXT CHAR OF NUM
STR 0,1,1,26(i)				Store number from R0 into memory by indirect addressing the Array Element Address; ALL DIGITS OF NUM ENTERED
LDR 3,1,0,25(n)				Output newline (represented by 1010101010101010 in memory address n--don't use ASCII code since that could be mistaken for a number)
OUT 3,1
LDA 0,0,0,0					Set R0 contents back to 0
SOB 1,2,0,0(aifls)			Subtract 1 from R1 and if > 0, branch back to ARRAY INPUT FOR LOOP START
IN 3,0						Read in the character of the number to try to match into R3; MATCH INPUT START
SMR 3,1,0,24(e)				Subtract the Enter key/carriage return bit string from R3 (if UNDERFLOW, R3 contents will be left alone)
JCC 1,2,0,25(pmid)			If UNDERFLOW, character is not Enter, so jump to PROCESS MATCH INPUT DIGIT
JMA 3,0,0(mie)				Else, unconditional jump to MATCH INPUT END
MLT 0,2						Multiply R0 contents by 10 (decimal, stored in R2) to move it to the tens place; PROCESS MATCH INPUT DIGIT
STR 1,1,0,23(t)				MLT will have set R0 to 0 for the higher bits while R1 has the actual product, so move R1 contents to R0 (passes through transfer address t=_)
LDR 0,1,0,23(t)
STR 3,1,0,23(t)				Add the R3 contents into R0 (passes through the Transfer Address)
AMR 0,1,0,23(t)
OUT 3,1						Output the R3 contents--GUI filters out non-digit inputs so don't have to worry if char is invalid
JMA 2,0,21(mis)				Unconditional jump back to MATCH INPUT START
AIR 0,0						Add an instruction that doesn't affect result so that the addresses work out for the index registers
STR 0,1,0,28(m)				Store R0 contents into the Num to Match Address; MATCH INPUT END
LDR 3,1,0,25(n)				Output newline
OUT 3,1
LDA 1,0,0,20				Set R1 back to 20 (decimal) to prep for next loop through array
LDA 3,1,0,30(a)				Set Array Element Address back to 1 behind the first element of the array (a-1)
SIR 3,1
STR 3,1,0,26(i)
LDR 2,1,0,30(a)				Set R2 to the value of the first element of the array (at address a)
LDR 0,1,0,28(m)				Load the value of the Num To Match Address into R0
LDR 3,1,0,26(i)				Add 1 to Array Element Address by loading the Array Element Address contents into R3; CLOSEST MATCH FOR LOOP START
AIR 3,1						Then adding 1 (Immed) to R3
STR 3,1,0,26(i)				Then storing the R3 contents back into the Array Element Address
LDR 3,1,0,28(m)				Load R3 with the value from the Num To Match Address
SMR 3,1,1,26(i)				Subtract the value indirect addressed by the Array Element Address from R3
JCC 1,3,0,16(hnd)			If Condition Code Underflow bit = 1, jump to HANDLE NEG DIFF 
JMA 3,0,18(cd)				Unconditional jump to COMPARE DIFFS
LDR 3,1,1,26(i)				Load R3 with the value indirect addressed by the Array Element Address; HANDLE NEG DIFF
SMR 3,1,0,28(m)				Subtract the value from the Num To Match Address from R3
SMR 3,1,0,29(d)				Subtract the value of the Min Diff Address from R3; COMPARE DIFFS
JCC 1,3,0,21(ncmf)			If UNDERFLOW is true, found the next closest match (when UNDERFLOW, register contents is left unchanged), so jump to NEW CLOSEST MATCH FOUND
JMA 3,0,23(ne)				Else, jump to NEXT ELEMENT
STR 3,1,0,29(d)				Store R3 contents to the Min Diff Address; NEW CLOSEST MATCH FOUND
LDR 2,1,1,26(i)				Load the value indirect addressed by the Array Element Address into R2
SOB 1,3,0,9(cmfls)			Subtract 1 from R1 and if > 0, branch to CLOSEST MATCH FOR LOOP START; NEXT ELEMENT
LDA 3,0,0,29				Address 29 should still have z stored in it; PRINT CLOSEST MATCH START
AIR 3,30					z = z + 46 = 148 (decimal) so can reach even later addresses
AIR 3,16
STR 3,0,0,29				Set X3 to z (passes through address 29)
LDX 3,0,29			
STR 2,1,0,27(b)				Backup R2 in address b since will need R2 for MLT
LDA 2,0,0,10				Set R2 to 10 to prep for MLT
LDA 0,0,0,10				Load R0 with 10000 (decimal) since largest possible number is 5 digits, by multiplying 10*10*10*10
MLT 0,2						Result should be 0 in R0, 100 in R1
LDR 1,1,0,26(i)				Re-purpose address i to store the value 100 to use for later
STR 1,1,0,23(t)				Move R1 contents to R0 (via Transfer Address) to prep for next MLT
LDR 0,1,0,23(t)
MLT 0,2						Result should be 0 in R0, 1000 in R1
LDR 1,1,0,29(d)				Re-purpose address d to store 1000 to use for later
STR 1,1,0,23(t)				Move R1 contents to R0 (via Transfer Address) to prep for next MLT
LDR 0,1,0,23(t)
MLT 0,2						Result should be 0 in R0, 10000 in R1
STR 1,1,0,23(t)				Move R1 contents to R0 (via Transfer Address) to prep for next MLT
LDR 0,1,0,23(t)		
LDA 1,0,0,1					Load R1 with 1, to indicate that the current digit to print is a leading zero
LDR 2,1,0,27(b)				Restore the closest match value (stored in address b) to R2
DVD 2,0						Divide the closest match (in R2) by 10000 (decimal, in R0) to get the ten thousands place
JZ 2,3,0,3(g1kp)			If the quotient (in R2) = 0, jump to GET THOUSANDS PLACE
OUT 2,1						Output the ten thousands place of the closest match (stored in R2)
LDA 1,0,0,0					Load R1 with 0, to indicate there are no more leading zeros
LDA 0,1,0,29(d)				Load R0 with 1000 (decimal, stored in address d); GET THOUSANDS PLACE
STR 3,1,0,23(t)				Move the remainder (in R3) to R2 (via Transfer Address)
LDR 2,1,0,23(t)
DVD 2,0						Divide the remainder (in R2) by 1000 (in R0)	
JZ 1,3,0,9(p1kp)			If R1 = 0 (no more leading zeros), jump to PRINT THOUSANDS PLACE
JZ 2,3,0,11(g100p)			If the quotient (in R2) = 0, jump to GET HUNDREDS PLACE
OUT 2,1						Output R2 contents; PRINT THOUSANDS PLACE
LDA 1,0,0,0					Load R1 with 0, to indicate there are no more leading zeros
LDR 0,1,0,26(i)				Load R0 with 100 (decimal, stored in address i); GET HUNDREDS PLACE
STR 3,1,0,23(t)				Move the remainder (in R3) to R2 (via Transfer Address)
LDR 2,1,0,23(t)		
DVD 2,0						Divide the remainder (in R2) by 100 (in R0)
JZ 1,3,0,17(p100p)			If R1 = 0 (no more leading zeros), jump to PRINT HUNDREDS PLACE
JZ 2,3,0,19(g10p)			If the quotient (in R2) = 0, jump to GET TENS PLACE
OUT 2,1						Output R2 contents; PRINT HUNDREDS PLACE
LDA 1,0,0,0					Load R1 with 0, to indicate there are no more leading zeros
LDA 2,0,0,10				Load R2 with 10 (decimal); GET TENS PLACE	
STR 3,1,0,23(t)				Move the remainder (in R3) to R2 (via Transfer Address)
LDR 2,1,0,23(t)
DVD 2,0						Divide the remainder (in R2) by 10 (in R0)		
JZ 1,3,0,25(p10p)			If R1 = 0 (no more leading zeros), jump to PRINT TENS PLACE
JZ 2,3,0,26(g1p)			If the quotient (in R2) = 0, jump to PRINT ONES PLACE
OUT 2,1						Output R2 contents; PRINT TENS PLACE
OUT 3,1						Output R3 contents; PRINT ONES PLACE
LDR 3,1,0,25(n)				Output newline
OUT 3,1
HLT							Halt; PROGRAM 1 END