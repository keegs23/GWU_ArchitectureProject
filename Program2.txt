LDA 0,0,0,30			X1 stores index address 84 to help access larger addresses; PROGRAM 2 START (this instruction stored at address p=30)	
AIR 0,30
AIR 0,24				X1 now holds 84
STR 0,0,0,29			Transfer R0 contents to X1 via address 29
LDX 1,0,29
AIR 0,30				X2 stores index address 143? initially to help access larger addresses
AIR 0,29				R0 now holds 143
STR 0,0,0,29
LDX 2,0,29			
SRC 0,0,1,1				X3 stores index address 262 to help access larger addresses (shifting left 1 arithmetically effectively multiplies by 2)
SIR 0,6					R0 now holds 262			
STR 0,0,0,29
LDX 3,0,29			
AIR 0,30				Memory address a=284 stores the start address of the character array for the file input, 290
STR 0,3,0,22(a)
STR 0,3,0,23(i)			Memory address i=285 stores the address of the current array element being processed AKA File Input Character Address
SRC 0,0,1,2				Memory address w=286 stores the address of the first character of the word to find, 1160 (shifting left by 2 arithmetically effectively multiplies by 4)
STR 0,3,0,24(w)
STR 0,3,0,25(x)			Memory address x=287 stores the address of the AKA Search Word Character Address
LDA 0,0,0,1				Memory address m=288 stores the previous char comparison result b/w the file input and search word (defaults to 1)
STR 0,3,0,26(m)
LDA 0,0,0,0				Memory address e=289 stores whether the search word char is the Enter key (defaults to 0)
STR 0,3,0,27(e)
LDA 0,0,0,0				R0 stores the sentence count while searching (starts at 1)
LDA 1,0,0,1				R1 stores the word count within a sentence while searching (starts at 1)
LDA 2,0,0,0				R2 stores the current file input character while inputting file/search word character while inputting search word/file input character while searching (defaults to value 0)
LDA 3,0,0,26			R3 stores the character to compare to--EOF ASCII code (26) while inputting file/Enter key ASCII code (13) while inputting search word/current search word character while searching (check the EQUALORNOT bit for whether the file input character and search word character match)
LDA 2,0,0,30			Output F (ASCII=70)
AIR 2,30
AIR 2,10
OUT 2,4
AIR 2,3					Output I (ASCII=73)
OUT 2,4			
AIR 2,3					Output L (ASCII=76)
OUT 2,4			
SIR 2,7					Output E (ASCII=69)
OUT 2,4			
LDA 2,0,0,30			Output space (ASCII=32)
SIR 2,2
OUT 2,4			
SRC 2,0,1,1				Output I (ASCII=73)
AIR 2,9
OUT 2,4			
AIR 2,5					Output N (ASCII=78)
OUT 2,4			
AIR 2,2					Output P (ASCII=80)
OUT 2,4			
AIR 2,5					Output U (ASCII=85)
OUT 2,4			
SIR 2,1					Output T (ASCII=84)
OUT 2,4			
SIR 2,26					Output : (ASCII=58)
OUT 2,4			
LDA 2,0,0,10			Output newline (ASCII=10)
OUT 2,4			
IN 2,3					Read ASCII character from file (deviceId=3) into R2; FILE INPUT LOOP START
TRR 2,3					Test if the character (R2) is the EOF character (R3) (assumes file has exactly 6 sentences, period is only used to denote end of sentence)
JCC 3,1,0,10(file)		If EQUALORNOT is true, character is EOF, so jump to FILE INPUT LOOP END
STR 2,3,1,23(i)			Else, store the character in the location indirect addressed by the File Input Character Address
OUT 2,4					Output the ASCII character in R2
LDR 1,3,0,23(i)			Increment the File Input Character Address by loading the address into R1
AIR 1,1					Then adding 1 (Immed) to R1
STR 1,3,0,23(i)			Then storing R1 contents into the File Input Character Address
JMA 1,0,1(fils)			Unconditional jump to FILE INPUT LOOP START
STR 3,3,1,23(i)			Store the EOF character (R3) into the address indirect addressed by the File Input Character Address; FILE INPUT LOOP END
LDA 3,0,0,10			Output newline (ASCII=10)
OUT 3,4			
OUT 3,4					Output newline (ASCII=10)			
SRC 3,0,1,3				Output T (ASCII=84)
AIR 3,4
OUT 3,4			
AIR 3,5					Output Y (ASCII=89)
OUT 3,4			
SIR 3,9					Output P (ASCII=80)
OUT 3,4			
SIR 3,11				Output E (ASCII=69)
OUT 3,4			
LDA 3,0,0,30			Output space (ASCII=32)
AIR 3,2
OUT 3,4			
SRC 3,0,1,2				Output W (ASCII=87)
AIR 3,23
OUT 3,4			
SIR 3,8					Output O (ASCII=79)
OUT 3,4			
AIR 3,3					Output R (ASCII=82)
OUT 3,4			
SIR 3,14				Output D (ASCII=68)
OUT 3,4			
LDA 3,0,0,30			Output space (ASCII=32)
AIR 3,2
OUT 3,4			
SRC 3,0,1,2				Output T (ASCII=84)
AIR 3,20
OUT 3,4			
SIR 3,5					Output O (ASCII=79)
OUT 3,4			
LDA 3,0,0,30			Output space (ASCII=32)
AIR 3,2
OUT 3,4			
SRC 3,0,1,2				Output F (ASCII=70)
AIR 3,6
OUT 3,4			
AIR 3,3					Output I (ASCII=73)
OUT 3,4			
AIR 3,5					Output N (ASCII=78)
OUT 3,4			
SIR 3,10				Output D (ASCII=68)
OUT 3,4			
LDA 3,0,0,10			Output newline (ASCII=10)
OUT 3,4			
OUT 3,4					Output newline (ASCII=10)		
LDA 3,0,0,13			Set R3 to the Enter key ASCII (13)
IN 2,4					Read ASCII character from user input into R2; SEARCH WORD INPUT LOOP START
TRR 2,3					Test if the character (R2) is the Enter key (R3)
JCC 3,2,0,8(swile)		If EQUALORNOT is true, character is Enter, so jump to SEARCH WORD INPUT LOOP END
STR 2,3,1,25(x)			Else, store the character in the location indirect addressed by the Search Word Character Address
LDR 1,3,0,25(x)			Increment the Search Word Character Address by loading the address into R1
AIR 1,1					Then adding 1 (Immed) to R1
STR 1,3,0,25(x)			Then storing R1 contents into the Search Word Character Address
JMA 2,0,0(swils)		Unconditional jump to SEARCH WORD INPUT LOOP START
STR 3,3,0,25(x)			Store the Enter character (R3) into the Search Word Character Address; SEARCH WORD INPUT LOOP END
LDR 0,3,0,22(a)			Reset contents of File Input Character Address to the start of the array (stored in a)
STR 0,3,0,23(i)
LDR 0,3,0,24(w)			Reset contents of Search Word Character Address to the start of the word (stored in w)
STR 0,3,0,25(x)
STX 2,0,29				Update X1 contents to 164 so can access more memory by storing X2 contents (143) to the transfer address t, 29; UPDATE X1
LDR 0,0,0,29			Then loading that value into R0
AIR 0,21				Then adding 21 (Immed) to R0
STR 0,0,0,29			Then storing R0 contents back to the transfer address
LDX 1,0,29				Then loading the contents into X1
AIR 0,30				Update X2 contents to 199?; UPDATE X2
AIR 0,5			
STR 0,0,0,29			
LDX 2,0,29				; UPDATE X2 END	
LDA 0,0,0,1				Set the sentence count (R0) to 1
LDA 1,0,0,1				Set the word count (R1) to 1
LDR 3,3,1,25(x)			Load search word character indirect addressed by x into R3; FIND LOOP START
LDA 2,0,0,13			Load the Enter key ASCII (13) into R2
TRR 3,2					Test if the search word character is the Enter key
JCC 3,1,0,10(sebtt)		If EQUALORNOT is true, character is Enter, so jump to SET E BIT TO TRUE
LDA 2,0,0,0				Else, set e bit to false by loading 0 into R2
STR 2,3,0,27(e)			Then storing the R2 contents into e
JMA 1,0,12(gfic)		Unconditional jump to GET FILE INPUT CHAR
LDA 2,0,0,1				Load 1 into R2; SET E BIT TO TRUE
STR 2,0/1,0,27(e)		Then store the R2 contents into address e
LDR 2,0/1,1,23(i)		Load the file input character indirect addressed by i into R2; GET FILE INPUT CHAR
LDA 3,0,0,26			Load EOF character (ASCII=26) into R3
TRR 2,3					Test if file input character (R2) is EOF (R3)
JCC 3,3,0,14(p2e)		If EQUALORNOT is true, is EOF, so jump to PROGRAM 2 END
AIR 3,6					Load a space (' ', ASCII=32) into R3
TRR 2,3					Test if file input character (R2) is a space (R3)
JCC 3,1,0,25(iwc)		If EQUALORNOT is true, is a space, so jump to INCREMENT WORD COUNT (assumes there is only 1 space after a period before the next sentence starts)
AIR 3,14				Load '.' (ASCII=46) into R3
TRR 2,3					Test if file input character (R2) is a period (R3)
JCC 3,2,0,0(isc)		If EQUALORNOT is true, is a period, so jump to INCREMENT SENTENCE COUNT
LDR 3,3,0,26(m)			Load the previous result of the char comparison between file input and search word (stored in m) into R3
JNE 3,2,0,5(cc)			If prev comparison result (R3) is 1 (i.e. not 0), jump to COMPARE CHARS
JMA 2,0,16(ifica)		Else, unconditional jump to INCREMENT FILE INPUT CHAR ADDRESS
LDR 3,3,0,27(e)			Load the e bit into R3; INCREMENT WORD COUNT
JNE 3,2,0,20(wf)			If the e bit is also true (not 0), jump to WORD FOUND
AIR 1,1					Else, add 1 (Immed) to R1
LDR 3,3,0,24(w)			Reset Search Word Character Address to the start (stored in w)
STR 3,3,0,25(x)
LDA 3,0,0,0				Reset the e bit to false by loading 0 into R3
STR 3,3,0,27(e)			Then storing R3 contents into e
LDA 3,0,0,1				Reset "previous" char comparison result (stored in m) to 1 by loading 1 into R3
STR 3,3,0,26(m)			Then storing R3 contents into m
JMA 2,0,16(ifica)		Unconditional jump to INCREMENT FILE INPUT CHAR ADDRESS
LDR 3,3,0,27(e)			Load the e bit into R3; INCREMENT SENTENCE COUNT
JNE 3,2,0,20(wf)			If the e bit is also true (not 0), jump to WORD FOUND
AIR 0,1					Else, add 1 (Immed) to R0
LDA 1,0,0,0				Reset word count in R1 to 0 (next char will be a space, so word count will be incremented to 1)
JMA 2,0,16(ifica)		Unconditional jump to INCREMENT FILE INPUT CHAR ADDRESS
LDR 3,3,1,25(x)			Load the search word char indirect addressed by x into R3; COMPARE CHARS
TRR 2,3					Test if the file input char (R2) and the search word char (R3) are equal (case sensitive)
JCC 3,2,0,11(iswca)		If EQUALORNOT, they match, so jump to INCREMENT SEARCH WORD CHAR ADDRESS
LDA 3,0,0,0				Else, store EQUALORNOT result (0) to m (via R3)
STR 3,3,0,26(m)
JMA 2,0,16(ifica)		Unconditional jump to INCREMENT FILE INPUT CHAR ADDRESS
LDR 3,3,0,25(x)			Load the contents of x into R3; INCREMENT SEARCH WORD CHAR ADDRESS
AIR 3,1					Then add 1 (Immed) to R3
STR 3,3,0,25(x)			Then store R3 contents back into x
LDA 3,0,0,1				Store char match EQUALORNOT result (1) to m (via R3)
STR 3,3,0,26(m)
LDR 3,3,0,23(i)			Load the contents of i into R3; INCREMENT FILE INPUT CHAR ADDRESS
AIR 3,1					Then add 1 (Immed) to R3
STR 3,3,0,23(i)			Then store R3 contents back into i
JMA 1,0,3(fls)			Unconditional jump to FIND LOOP START
LDR 2,3,0,24(w)			Reset contents of x to the start of the search word (stored in w) via R2; WORD FOUND
STR 2,3,0,25(x)
LDR 2,3,1,25(x)			Load the search word char indirect addressed by x into R2; PRINT SEARCH WORD LOOP START
LDA 3,0,0,13			Load the Enter key ASCII (13) into R3
TRR 2,3					Test if the search word char (R2) is the Enter key (R3)
JCC 3,2,0,31(psn)		If EQUALORNOT, jump to PRINT SENTENCE NUMBER
OUT 2,4					Else, output search word char (R2)
LDR 3,3,0,25(x)			Increment the address in x by loading the contents of x into R3
AIR 3,1					Then adding 1 (Immed) to R3
STR 3,3,0,25(x)			Then storing the R3 contents back into x
JMA 2,0,22(pswls)		Unconditional jump to PRINT SEARCH WORD LOOP START
LDA 3,0,0,10			Output newline (ASCII=10); PRINT SENTENCE NUMBER
OUT 3,4			
SRC 3,0,1,3				Output S (ASCII=83)
AIR 3,3
OUT 3,4			
SIR 3,14				Output E (ASCII=69)
OUT 3,4			
AIR 3,9					Output N (ASCII=78)
OUT 3,4			
AIR 3,6					Output T (ASCII=84)
OUT 3,4			
SIR 3,15				Output E (ASCII=69)
OUT 3,4			
AIR 3,9					Output N (ASCII=78)
OUT 3,4			
SIR 3,11				Output C (ASCII=67)
OUT 3,4			
AIR 3,2					Output E (ASCII=69)
OUT 3,4			
LDA 3,0,0,30			Output space (ASCII=32)
AIR 3,2
OUT 3,4			
OUT 0,2					Output sentence number of search word (1-6, stored in R0)--NOT ASCII			
AIR 3,12				Output comma (ASCII=44)
OUT 3,4			
SIR 3,12				Output space (ASCII=32)
OUT 3,4			
SRC 3,0,1,2				Output W (ASCII=87)
AIR 3,23
OUT 3,4			
SIR 3,8					Output O (ASCII=79)
OUT 3,4			
AIR 3,3					Output R (ASCII=82)
OUT 3,4			
SIR 3,14				Output D (ASCII=68)
OUT 3,4			
LDA 3,0,0,30			Output space (ASCII=32)
AIR 3,2
OUT 3,4			
STR 1,3,0,26(m)			Copy the word number (stored in R1) to R2 to prep for division (transfer through repurposed address m); PRINT WORD NUMBER
LDR 2,3,0,26(m)
LDA 0,0,0,10			Load 10 (decimal) into R0 as the divisor (assumes a sentence will have no more than 99 words)
DVD 2,0					Divide the word count (R2) by 10 (decimal, R0)
JZ 2,3,0,13(pod)			If the quotient (in R2) = 0, jump to PRINT ONES DIGIT
OUT 2,2					Else, output the tens digit (R2)--NOT ASCII
OUT 3,2					Output the remainder/ones digit (in R3)--NOT ASCII; PRINT ONES DIGIT
HLT						Halt; PROGRAM 2 END